#ifndef SOUND_H
#define SOUND_H


extern struct SoundEffectChannel * SndOpenSfxChannel(unsigned char *channelNum); // 0x8003F1C8

extern void SndCloseSfxChannel(int channelNum); // 0x8003F214

extern struct SoundEffectChannel * SndGetSfxChannel(int channelNum); // 0x8003F240

extern void SOUND_ProcessInstanceSounds(unsigned char *sfxFileData, struct SoundInstance *soundInstTbl, struct _Position *position, int livesInOnePlace, int inSpectral, int hidden, long *triggerFlags); // 0x8003F26C

extern void SOUND_EndInstanceSounds(unsigned char *sfxFileData, struct SoundInstance *soundInstTbl); // 0x8003F3E8

extern int isOkayToPlaySound(int flags, int spectralPlane, int hidden); // 0x8003F554

extern void setPeriodicSoundStateOff(struct SoundInstance *soundInst, struct ObjectPeriodicSound *sound); // 0x8003F648

extern void processPeriodicSound(struct _Position *position, int livesInOnePlane, int inSpectral, int hidden, struct SoundInstance *soundInst, struct ObjectPeriodicSound *sound); // 0x8003F6D4

extern void processEventSound(struct _Position *position, struct SoundInstance *soundInst, struct ObjectEventSound *sound); // 0x8003FB60

extern void SOUND_StartInstanceSound(struct SoundInstance *soundInst); // 0x8003FEFC

extern void SOUND_StopInstanceSound(struct SoundInstance *soundInst); // 0x8003FF1C

extern int SOUND_IsInstanceSoundLoaded(unsigned char *sfxFileData, long soundNumber); // 0x8003FF78

extern void SOUND_SetInstanceSoundPitch(struct SoundInstance *soundInst, long pitchChangeAmt, long time); // 0x80040074

extern void SOUND_SetInstanceSoundVolume(struct SoundInstance *soundInst, long volumeChangeAmt, long time); // 0x80040134

extern void processOneShotSound(struct _Position *position, int hidden, long *triggerFlags, struct SoundInstance *soundInst, struct ObjectOneShotSound *sound); // 0x80040238

extern unsigned long SOUND_Play3dSound(struct _Position *position, int sfxToneID, int pitch, int maxVolume, int minVolDist); // 0x80040580

extern unsigned long SOUND_Update3dSound(struct _Position *position, unsigned long handle, int pitch, int maxVolume, int minVolDist); // 0x800407A8

extern void SOUND_HandleGlobalValueSignal(int name, long data); // 0x800409D0

extern void SOUND_Init(); // 0x800409D8

extern void SOUND_Free(); // 0x80040A88

extern void SOUND_SetMusicVariable(int variable, int value); // 0x80040AAC

extern void SOUND_SetMusicVolume(int newVolume); // 0x80040ACC

extern void SOUND_SetSfxVolume(int newVolume); // 0x80040B00

extern void SOUND_SetVoiceVolume(int newVolume); // 0x80040B34

extern void SOUND_PauseAllSound(); // 0x80040B54

extern void SOUND_ResumeAllSound(); // 0x80040B84

extern void SOUND_StopAllSound(); // 0x80040BB4

extern void SOUND_ResetAllSound(); // 0x80040BF4

extern void SOUND_MusicOff(); // 0x80040C24

extern void SOUND_MusicOn(); // 0x80040C88

extern void SOUND_SfxOff(); // 0x80040CC0

extern void SOUND_SfxOn(); // 0x80040CE0

extern int SndIsPlaying(unsigned long handle); // 0x80040CE8

extern int SndIsPlayingOrRequested(unsigned long handle); // 0x80040D08

extern int SndTypeIsPlayingOrRequested(unsigned int sfxToneID); // 0x80040D28

extern unsigned long SndPlay(unsigned int sample); // 0x80040D48

extern void SndEndLoop(unsigned long handle); // 0x80040D80

extern unsigned long SndPlayVolPan(unsigned int sample, unsigned short vol, unsigned short pan, short pitch); // 0x80040DA0

extern unsigned long SndUpdateVolPanPitch(unsigned long handle, unsigned short vol, unsigned short pan, short pitch); // 0x80040DDC

extern void transitionMusicEndCallback(long userData, int slot, int loopFlag); // 0x80040E24

extern void loadMainMusicReturn(int dynamicBankIndex, int errorStatus); // 0x80040E78

extern void mainMusicEndCallback(long userData, int slot, int loopFlag); // 0x80040EBC

extern void loadTransitionMusicReturn(int dynamicBankIndex, int errorStatus); // 0x80040F74

extern void initialLoadMainMusicReturn(int dynamicBankIndex, int errorStatus); // 0x80040FBC

extern void musicFadeoutDone(); // 0x80040FF4

extern void SOUND_UpdateSound(); // 0x80041024

extern void musicPlaneShiftFadeoutDone(); // 0x80041378

extern void SOUND_PlaneShift(int newPlane); // 0x800413B4

extern void SOUND_FreeDynamicMusic(); // 0x80041444

extern void SOUND_SetMusicModifier(long modifier); // 0x8004149C

extern void SOUND_ResetMusicModifier(long modifier); // 0x8004155C


#endif
